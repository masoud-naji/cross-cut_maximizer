{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\n\nconst useFetch = url => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isPending, setIspending] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const abortcont = new AbortController();\n    setT;\n    fetch(url, {\n      signal: abortcont.signal\n    }).then(res => {\n      if (!res.ok) {\n        throw Error(\"Could not fetch the data for that resource\");\n      }\n\n      return res.json();\n    }).then(data => {\n      setData(data);\n      setIspending(false);\n      setError(null);\n    }).catch(err => {\n      if (err.name === \"AbortError\") {\n        console.log(\"fetch aborted\");\n      } else {\n        setIspending(false);\n        setError(err.message);\n      }\n    });\n    return () => abortcont.abort;\n  }, [url]);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n\n_s(useFetch, \"L6xGcqdJOeYMJHXujn2oH3qorFg=\");\n\nexport default useFetch; //\"http://localhost:8000/AllUsers\"","map":{"version":3,"sources":["D:/Project/React/practic/testmuknowladge/src/Components/CustomHooks/useFetch.js"],"names":["useEffect","useState","useFetch","url","data","setData","isPending","setIspending","error","setError","abortcont","AbortController","setT","fetch","signal","then","res","ok","Error","json","catch","err","name","console","log","message","abort"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AACxB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMU,SAAS,GAAG,IAAIC,eAAJ,EAAlB;AACAC,IAAAA,IAAI;AACNC,IAAAA,KAAK,CAACV,GAAD,EAAM;AAAEW,MAAAA,MAAM,EAAEJ,SAAS,CAACI;AAApB,KAAN,CAAL,CACGC,IADH,CACSC,GAAD,IAAS;AACb,UAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACX,cAAMC,KAAK,CAAC,4CAAD,CAAX;AACD;;AACD,aAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,KANH,EAOGJ,IAPH,CAOSX,IAAD,IAAU;AACdC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,KAXH,EAYGW,KAZH,CAYUC,GAAD,IAAS;AACd,UAAIA,GAAG,CAACC,IAAJ,KAAa,YAAjB,EAA+B;AAC7BC,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD,OAFD,MAEO;AACLjB,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,QAAAA,QAAQ,CAACY,GAAG,CAACI,OAAL,CAAR;AACD;AACF,KAnBH;AAoBA,WAAO,MAAMf,SAAS,CAACgB,KAAvB;AACD,GAxBQ,EAwBN,CAACvB,GAAD,CAxBM,CAAT;AAyBA,SAAO;AAAEC,IAAAA,IAAF;AAAQE,IAAAA,SAAR;AAAmBE,IAAAA;AAAnB,GAAP;AACD,CA/BD;;GAAMN,Q;;AAiCN,eAAeA,QAAf,C,CAEA","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst useFetch = (url) => {\r\n  const [data, setData] = useState(null);\r\n  const [isPending, setIspending] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n      const abortcont = new AbortController();\r\n      setT\r\n    fetch(url, { signal: abortcont.signal })\r\n      .then((res) => {\r\n        if (!res.ok) {\r\n          throw Error(\"Could not fetch the data for that resource\");\r\n        }\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        setData(data);\r\n        setIspending(false);\r\n        setError(null);\r\n      })\r\n      .catch((err) => {\r\n        if (err.name === \"AbortError\") {\r\n          console.log(\"fetch aborted\");\r\n        } else {\r\n          setIspending(false);\r\n          setError(err.message);\r\n        }\r\n      });\r\n    return () => abortcont.abort;\r\n  }, [url]);\r\n  return { data, isPending, error };\r\n};\r\n\r\nexport default useFetch;\r\n\r\n//\"http://localhost:8000/AllUsers\"\r\n"]},"metadata":{},"sourceType":"module"}